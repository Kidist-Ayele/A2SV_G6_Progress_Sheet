class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # Adjacency Matrix to Adjacency List
        graphs = defaultdict(list)

        for i in range(len(graph)):
            for j in range(len(graph[0])):
                if graph[i][j] and i != j:
                    graphs[i].append(j)

        # Color components 
        colors = {}

        def dfs(node, color):
            colors[node] = color

            for child in graphs[node]:
                if child not in colors:
                    dfs(child, color)

        color = 0
        for node in initial:
            if node not in colors:
                dfs(node, color)
                color += 1

        # Size of each color
        size = Counter(colors.values())

        # Find unique colors
        color_count = defaultdict(int)

        for node in initial:
            color_count[colors[node]] += 1

        ans = float('inf')
        for node in initial:
            if color_count[colors[node]] == 1:
                if ans == float('inf'):
                    ans = node
                elif size[colors[node]] > size[colors[ans]]:
                    ans = node
                elif size[colors[node]] == size[colors[ans]] and node < ans:
                    ans = node

        return ans if ans != float('inf') else min(initial)


        




        